import java.io.File;
import java.util.ArrayList;
import java.util.Scanner;

// Class to simulate launching and landing of rockets with varying cargo and manifest
public class Simulation {

	public Simulation() {
		
	}
	
//	Load items from text file into an array of Items
	public ArrayList<Item> loadItems(File file) {
		ArrayList<Item> itemList = new ArrayList<Item>();
		try {
			Scanner scanner = new Scanner(file);
			while(scanner.hasNextLine()) {
				String[] itemDetails = scanner.nextLine().split("=");
				Item item = new Item();
				item.setName(itemDetails[0]);
				item.setWeight(Integer.parseInt(itemDetails[1]));
				itemList.add(item);
			}
			return itemList;
		} catch(Exception e) {
			e.printStackTrace();
		}
		return itemList;
	}
	
//	Load all Items generated by loadItems into U1 rockets into an array, adding new rockets as they become filled up
	
	public ArrayList<U1> loadU1(ArrayList<Item> itemList) {
		ArrayList<U1> u1Fleet = new ArrayList<>();
		int currentItem = 0;
		for(int i = 0; i < itemList.size(); i++) {
			U1 u1Rocket = new U1();
		while (currentItem < itemList.size() && 
				u1Rocket.getCargo_carried() +
		itemList.get(currentItem).getWeight() 
		<= u1Rocket.getCargo_limit()) {
			u1Rocket.setCargo_carried(itemList.get(currentItem).getWeight());
		
		currentItem++;
		i++;
		}
		u1Fleet.add(u1Rocket);
//		Decrement i as while loop will over increment by one
		i--;
	}
		return u1Fleet;
	}
	
	public ArrayList<U2> loadU2(ArrayList<Item> itemList) {
		ArrayList<U2> u2Fleet = new ArrayList<>();
		int currentItem = 0;
		for(int i = 0; i < itemList.size(); i++) {
			U2 u2Rocket = new U2();
			while(currentItem < itemList.size() && u2Rocket.getCargo_carried() +
					itemList.get(currentItem).getWeight() <= u2Rocket.getCargo_limit()) {
				u2Rocket.setCargo_carried(itemList.get(currentItem).getWeight());
				currentItem++;
				i++;
			}
			u2Fleet.add(u2Rocket);
//			Decrement i  as while loop will over increment by one
			i--;
		}
		return u2Fleet;
			
	}
	
	public int runSimulation(ArrayList fleet) {
		int totalCost = 0;
		for(int i = 0; i < fleet.size(); i++) {
			Rocket currentRocket = (Rocket) fleet.get(i);
			while(!currentRocket.launch() || !currentRocket.land()) {
				totalCost += currentRocket.getCost();
			}
			totalCost += currentRocket.getCost();
		}
		return totalCost;
	}
}
